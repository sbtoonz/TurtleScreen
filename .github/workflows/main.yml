permissions:
  contents: read  # Read access to the repository contents
  id-token: write  # Write access to create releases and upload assets

name: Build and Release on Tag

on:
  push:
    tags:
      - 'V*'  # Trigger on tags that start with "V"
  workflow_dispatch:  # Allow manual trigger from the GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest  # Change to 'windows-latest' if you want to build on Windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        run: |
          python3 -m pip install --upgrade pip
          pip install platformio

      - name: Compile with PlatformIO
        run: pio run

      - name: List directory contents for debugging
        run: |
          ls -R .pio/build/

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-bin
          path: '.pio/build/**/firmware.bin'  # Path to firmware.bin

  release:
    needs: build  # Ensures this job runs after 'build'
    runs-on: ubuntu-latest  # Change to 'windows-latest' if needed
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: firmware-bin
          path: ./downloaded  # Save the artifact into a specific folder

      - name: List downloaded contents for debugging
        run: |
          ls -R ./downloaded

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "Automated release for version ${{ github.ref_name }}."
          draft: false
          prerelease: false

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloaded/TDisplay/firmware.bin  # Ensure we reference the correct location
          asset_name: firmware-${{ github.ref_name }}.bin
          asset_content_type: application/octet-stream
